import * as C from "@/components/catppuccin-icons";
import { fileExtensions, fileNames } from "./file-icons";
import { folderNames } from "./folder-icons";
import type { IconName } from "./icons";

const catppuccinIconMap: Record<
  IconName,
  React.ComponentType<React.SVGProps<SVGSVGElement>>
> = {
  _file: C._File,
  _folder: C._Folder,
  _root: C._Root,
  "adobe-ae": C.AdobeAe,
  "adobe-ai": C.AdobeAi,
  "adobe-id": C.AdobeId,
  "adobe-ps": C.AdobePs,
  "adobe-xd": C.AdobeXd,
  adonis: C.Adonis,
  alex: C.Alex,
  amber: C.Amber,
  android: C.Android,
  "angular-component": C.AngularComponent,
  "angular-directive": C.AngularDirective,
  "angular-guard": C.AngularGuard,
  "angular-pipe": C.AngularPipe,
  "angular-service": C.AngularService,
  angular: C.Angular,
  "ansible-lint": C.AnsibleLint,
  antlr: C.Antlr,
  apache: C.Apache,
  "api-blueprint": C.ApiBlueprint,
  apollo: C.Apollo,
  apple: C.Apple,
  asciidoc: C.Asciidoc,
  assembly: C.Assembly,
  "astro-config": C.AstroConfig,
  astro: C.Astro,
  audio: C.Audio,
  autohotkey: C.Autohotkey,
  "azure-pipelines": C.AzurePipelines,
  babel: C.Babel,
  bash: C.Bash,
  batch: C.Batch,
  bazel: C.Bazel,
  benchmark: C.Benchmark,
  binary: C.Binary,
  biome: C.Biome,
  bitbucket: C.Bitbucket,
  blitz: C.Blitz,
  bower: C.Bower,
  browserslist: C.Browserslist,
  "bun-lock": C.BunLock,
  bun: C.Bun,
  "c-header": C.CHeader,
  c: C.C,
  cabal: C.Cabal,
  caddy: C.Caddy,
  capacitor: C.Capacitor,
  "cargo-lock": C.CargoLock,
  cargo: C.Cargo,
  certificate: C.Certificate,
  changelog: C.Changelog,
  "circle-ci": C.CircleCi,
  clojure: C.Clojure,
  cmake: C.Cmake,
  cobol: C.Cobol,
  "code-climate": C.CodeClimate,
  "code-of-conduct": C.CodeOfConduct,
  codeowners: C.Codeowners,
  coffeescript: C.Coffeescript,
  commitlint: C.Commitlint,
  config: C.Config,
  contributing: C.Contributing,
  "cpp-header": C.CppHeader,
  cpp: C.Cpp,
  csharp: C.Csharp,
  cspell: C.Cspell,
  "css-map": C.CssMap,
  css: C.Css,
  css3: C.Css3,
  csv: C.Csv,
  cucumber: C.Cucumber,
  cuda: C.Cuda,
  cypress: C.Cypress,
  d: C.D,
  "dart-generated": C.DartGenerated,
  dart: C.Dart,
  database: C.Database,
  "deno-lock": C.DenoLock,
  deno: C.Deno,
  dependabot: C.Dependabot,
  devcontainer: C.Devcontainer,
  dhall: C.Dhall,
  diff: C.Diff,
  django: C.Django,
  "docker-compose": C.DockerCompose,
  "docker-ignore": C.DockerIgnore,
  docker: C.Docker,
  drawio: C.Drawio,
  "drizzle-orm": C.DrizzleOrm,
  "dub-selections": C.DubSelections,
  dub: C.Dub,
  editorconfig: C.Editorconfig,
  ejs: C.Ejs,
  eleventy: C.Eleventy,
  elixir: C.Elixir,
  elm: C.Elm,
  ember: C.Ember,
  env: C.Env,
  envrc: C.Envrc,
  erlang: C.Erlang,
  esbuild: C.Esbuild,
  "eslint-ignore": C.EslintIgnore,
  eslint: C.Eslint,
  exe: C.Exe,
  fastlane: C.Fastlane,
  favicon: C.Favicon,
  figma: C.Figma,
  firebase: C.Firebase,
  flutter: C.Flutter,
  "folder-admin": C.FolderAdmin,
  "folder-android": C.FolderAndroid,
  "folder-animation": C.FolderAnimation,
  "folder-api": C.FolderApi,
  "folder-app": C.FolderApp,
  "folder-assets": C.FolderAssets,
  "folder-audio": C.FolderAudio,
  "folder-audit": C.FolderAudit,
  "folder-aws": C.FolderAws,
  "folder-azure-devops": C.FolderAzureDevops,
  "folder-azure-pipelines": C.FolderAzurePipelines,
  "folder-benchmark": C.FolderBenchmark,
  "folder-caddy": C.FolderCaddy,
  "folder-cargo": C.FolderCargo,
  "folder-circle-ci": C.FolderCircleCi,
  "folder-client": C.FolderClient,
  "folder-cloud": C.FolderCloud,
  "folder-command": C.FolderCommand,
  "folder-components": C.FolderComponents,
  "folder-composables": C.FolderComposables,
  "folder-config": C.FolderConfig,
  "folder-connection": C.FolderConnection,
  "folder-constant": C.FolderConstant,
  "folder-content": C.FolderContent,
  "folder-controllers": C.FolderControllers,
  "folder-core": C.FolderCore,
  "folder-coverage": C.FolderCoverage,
  "folder-cypress": C.FolderCypress,
  "folder-database": C.FolderDatabase,
  "folder-debug": C.FolderDebug,
  "folder-devcontainer": C.FolderDevcontainer,
  "folder-direnv": C.FolderDirenv,
  "folder-dist": C.FolderDist,
  "folder-docker": C.FolderDocker,
  "folder-docs": C.FolderDocs,
  "folder-download": C.FolderDownload,
  "folder-drizzle-orm": C.FolderDrizzleOrm,
  "folder-examples": C.FolderExamples,
  "folder-fastlane": C.FolderFastlane,
  "folder-firebase": C.FolderFirebase,
  "folder-fonts": C.FolderFonts,
  "folder-forgejo": C.FolderForgejo,
  "folder-functions": C.FolderFunctions,
  "folder-fvm": C.FolderFvm,
  "folder-git": C.FolderGit,
  "folder-github": C.FolderGithub,
  "folder-gitlab": C.FolderGitlab,
  "folder-gradle": C.FolderGradle,
  "folder-hooks": C.FolderHooks,
  "folder-husky": C.FolderHusky,
  "folder-images": C.FolderImages,
  "folder-intellij": C.FolderIntellij,
  "folder-kubernetes": C.FolderKubernetes,
  "folder-layouts": C.FolderLayouts,
  "folder-locales": C.FolderLocales,
  "folder-middleware": C.FolderMiddleware,
  "folder-mocks": C.FolderMocks,
  "folder-next": C.FolderNext,
  "folder-nix": C.FolderNix,
  "folder-node": C.FolderNode,
  "folder-nuxt": C.FolderNuxt,
  "folder-packages": C.FolderPackages,
  "folder-plugins": C.FolderPlugins,
  "folder-pre-commit": C.FolderPreCommit,
  "folder-prisma": C.FolderPrisma,
  "folder-public": C.FolderPublic,
  "folder-queue": C.FolderQueue,
  "folder-redux": C.FolderRedux,
  "folder-renovate": C.FolderRenovate,
  "folder-routes": C.FolderRoutes,
  "folder-sass": C.FolderSass,
  "folder-scripts": C.FolderScripts,
  "folder-security": C.FolderSecurity,
  "folder-server": C.FolderServer,
  "folder-src": C.FolderSrc,
  "folder-storybook": C.FolderStorybook,
  "folder-styles": C.FolderStyles,
  "folder-svg": C.FolderSvg,
  "folder-tauri": C.FolderTauri,
  "folder-temp": C.FolderTemp,
  "folder-templates": C.FolderTemplates,
  "folder-tests": C.FolderTests,
  "folder-themes": C.FolderThemes,
  "folder-turbo": C.FolderTurbo,
  "folder-types": C.FolderTypes,
  "folder-upload": C.FolderUpload,
  "folder-utils": C.FolderUtils,
  "folder-vercel": C.FolderVercel,
  "folder-video": C.FolderVideo,
  "folder-views": C.FolderViews,
  "folder-vscode": C.FolderVscode,
  "folder-workflows": C.FolderWorkflows,
  "folder-wxt": C.FolderWxt,
  "folder-xcode": C.FolderXcode,
  "folder-yarn": C.FolderYarn,
  font: C.Font,
  forgejo: C.Forgejo,
  fortran: C.Fortran,
  fsharp: C.Fsharp,
  fvm: C.Fvm,
  gatsby: C.Gatsby,
  gcp: C.Gcp,
  "git-cliff": C.GitCliff,
  git: C.Git,
  gitlab: C.Gitlab,
  gitpod: C.Gitpod,
  "gleam-config": C.GleamConfig,
  gleam: C.Gleam,
  "go-mod": C.GoMod,
  "go-template": C.GoTemplate,
  go: C.Go,
  "godot-assets": C.GodotAssets,
  godot: C.Godot,
  gradle: C.Gradle,
  graphql: C.Graphql,
  groovy: C.Groovy,
  gulp: C.Gulp,
  haml: C.Haml,
  handlebars: C.Handlebars,
  hardhat: C.Hardhat,
  haskell: C.Haskell,
  haxe: C.Haxe,
  helm: C.Helm,
  heroku: C.Heroku,
  histoire: C.Histoire,
  html: C.Html,
  http: C.Http,
  huff: C.Huff,
  hugo: C.Hugo,
  humans: C.Humans,
  husky: C.Husky,
  image: C.Image,
  ionic: C.Ionic,
  "java-annotation": C.JavaAnnotation,
  "java-class-abstract": C.JavaClassAbstract,
  "java-class-final": C.JavaClassFinal,
  "java-class-sealed": C.JavaClassSealed,
  "java-class": C.JavaClass,
  "java-enum": C.JavaEnum,
  "java-exception": C.JavaException,
  "java-interface": C.JavaInterface,
  "java-jar": C.JavaJar,
  "java-record": C.JavaRecord,
  java: C.Java,
  "javascript-config": C.JavascriptConfig,
  "javascript-map": C.JavascriptMap,
  "javascript-react": C.JavascriptReact,
  "javascript-test": C.JavascriptTest,
  javascript: C.Javascript,
  jest: C.Jest,
  jinja: C.Jinja,
  "json-schema": C.JsonSchema,
  json: C.Json,
  juce: C.Juce,
  julia: C.Julia,
  jupyter: C.Jupyter,
  just: C.Just,
  kdl: C.Kdl,
  key: C.Key,
  kotlin: C.Kotlin,
  laravel: C.Laravel,
  latex: C.Latex,
  latte: C.Latte,
  lerna: C.Lerna,
  less: C.Less,
  lib: C.Lib,
  license: C.License,
  "lint-staged": C.LintStaged,
  liquid: C.Liquid,
  lisp: C.Lisp,
  lock: C.Lock,
  log: C.Log,
  lua: C.Lua,
  luau: C.Luau,
  makefile: C.Makefile,
  "markdown-mdx": C.MarkdownMdx,
  markdown: C.Markdown,
  marko: C.Marko,
  matlab: C.Matlab,
  mdbook: C.Mdbook,
  mermaid: C.Mermaid,
  meson: C.Meson,
  midi: C.Midi,
  mjml: C.Mjml,
  modernizr: C.Modernizr,
  "ms-excel": C.MsExcel,
  "ms-powerpoint": C.MsPowerpoint,
  "ms-word": C.MsWord,
  nativescript: C.Nativescript,
  "nest-controller": C.NestController,
  "nest-decorator": C.NestDecorator,
  "nest-filter": C.NestFilter,
  "nest-guard": C.NestGuard,
  "nest-middleware": C.NestMiddleware,
  "nest-pipe": C.NestPipe,
  "nest-service": C.NestService,
  nest: C.Nest,
  netlify: C.Netlify,
  next: C.Next,
  nextflow: C.Nextflow,
  nginx: C.Nginx,
  nim: C.Nim,
  ninja: C.Ninja,
  "nix-lock": C.NixLock,
  nix: C.Nix,
  nodemon: C.Nodemon,
  "npm-ignore": C.NpmIgnore,
  "npm-lock": C.NpmLock,
  npm: C.Npm,
  nuget: C.Nuget,
  nunjucks: C.Nunjucks,
  "nuxt-ignore": C.NuxtIgnore,
  nuxt: C.Nuxt,
  ocaml: C.Ocaml,
  org: C.Org,
  "package-json": C.PackageJson,
  "panda-css": C.PandaCss,
  pdf: C.Pdf,
  perl: C.Perl,
  php: C.Php,
  phrase: C.Phrase,
  phtml: C.Phtml,
  "pixi-lock": C.PixiLock,
  pixi: C.Pixi,
  plantuml: C.Plantuml,
  playwright: C.Playwright,
  plop: C.Plop,
  "pnpm-lock": C.PnpmLock,
  pnpm: C.Pnpm,
  "poetry-lock": C.PoetryLock,
  postcss: C.Postcss,
  powershell: C.Powershell,
  "pre-commit": C.PreCommit,
  premake: C.Premake,
  "prettier-ignore": C.PrettierIgnore,
  prettier: C.Prettier,
  prisma: C.Prisma,
  prolog: C.Prolog,
  properties: C.Properties,
  proto: C.Proto,
  pug: C.Pug,
  puppeteer: C.Puppeteer,
  "python-compiled": C.PythonCompiled,
  "python-config": C.PythonConfig,
  python: C.Python,
  r: C.R,
  racket: C.Racket,
  razor: C.Razor,
  readme: C.Readme,
  reason: C.Reason,
  redwood: C.Redwood,
  release: C.Release,
  remix: C.Remix,
  renovate: C.Renovate,
  rescript: C.Rescript,
  roblox: C.Roblox,
  robots: C.Robots,
  rojo: C.Rojo,
  rollup: C.Rollup,
  "ruby-gem-lock": C.RubyGemLock,
  "ruby-gem": C.RubyGem,
  ruby: C.Ruby,
  ruff: C.Ruff,
  "rust-config": C.RustConfig,
  rust: C.Rust,
  salesforce: C.Salesforce,
  sass: C.Sass,
  scala: C.Scala,
  search: C.Search,
  security: C.Security,
  "semantic-release": C.SemanticRelease,
  "semgrep-ignore": C.SemgrepIgnore,
  semgrep: C.Semgrep,
  sentry: C.Sentry,
  serverless: C.Serverless,
  shader: C.Shader,
  sketch: C.Sketch,
  snowpack: C.Snowpack,
  solid: C.Solid,
  solidity: C.Solidity,
  "sonar-cloud": C.SonarCloud,
  spwn: C.Spwn,
  stackblitz: C.Stackblitz,
  stata: C.Stata,
  stencil: C.Stencil,
  stitches: C.Stitches,
  "storybook-svelte": C.StorybookSvelte,
  "storybook-vue": C.StorybookVue,
  storybook: C.Storybook,
  "stylelint-ignore": C.StylelintIgnore,
  stylelint: C.Stylelint,
  sublime: C.Sublime,
  "super-collider": C.SuperCollider,
  "svelte-config": C.SvelteConfig,
  svelte: C.Svelte,
  svg: C.Svg,
  swift: C.Swift,
  symlink: C.Symlink,
  tailwind: C.Tailwind,
  taskfile: C.Taskfile,
  "tauri-ignore": C.TauriIgnore,
  tauri: C.Tauri,
  terraform: C.Terraform,
  text: C.Text,
  todo: C.Todo,
  toml: C.Toml,
  turbo: C.Turbo,
  twig: C.Twig,
  twine: C.Twine,
  "typescript-config": C.TypescriptConfig,
  "typescript-def": C.TypescriptDef,
  "typescript-react": C.TypescriptReact,
  "typescript-test": C.TypescriptTest,
  typescript: C.Typescript,
  typst: C.Typst,
  unity: C.Unity,
  unocss: C.Unocss,
  url: C.Url,
  uv: C.Uv,
  v: C.V,
  "vanilla-extract": C.VanillaExtract,
  vento: C.Vento,
  "vercel-ignore": C.VercelIgnore,
  vercel: C.Vercel,
  verilog: C.Verilog,
  vhs: C.Vhs,
  video: C.Video,
  vim: C.Vim,
  "visual-studio": C.VisualStudio,
  vital: C.Vital,
  vite: C.Vite,
  vitest: C.Vitest,
  "vs-codium": C.VsCodium,
  "vscode-ignore": C.VscodeIgnore,
  vscode: C.Vscode,
  "vue-config": C.VueConfig,
  vue: C.Vue,
  "web-assembly": C.WebAssembly,
  webpack: C.Webpack,
  windi: C.Windi,
  workflow: C.Workflow,
  wxt: C.Wxt,
  xaml: C.Xaml,
  xcode: C.Xcode,
  xmake: C.Xmake,
  xml: C.Xml,
  yaml: C.Yaml,
  "yarn-lock": C.YarnLock,
  yarn: C.Yarn,
  zap: C.Zap,
  zig: C.Zig,
  zip: C.Zip,
};

export const getFileIcon = (name: string) =>
  catppuccinIconMap[
    (fileNames[name] ??
      fileExtensions[name.split(".").pop() ?? ""] ??
      "_file") as IconName
  ];

export const getFolderIcon = (name: string) =>
  catppuccinIconMap[(folderNames[name] ?? "_folder") as IconName];
